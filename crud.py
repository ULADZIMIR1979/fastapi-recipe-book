"""
–ú–æ–¥—É–ª—å —Å CRUD –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏ (Create, Read, Update, Delete)
–°–æ–¥–µ—Ä–∂–∏—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
"""

from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select
from sqlalchemy.orm import selectinload
from models import Recipe, Ingredient
from schemas import RecipeCreate
from typing import List, Optional

print("üõ†Ô∏è –°–æ–∑–¥–∞–µ–º CRUD –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö...")


class CRUDRecipe:
    """
    –ö–ª–∞—Å—Å —Å CRUD –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏ –¥–ª—è –º–æ–¥–µ–ª–∏ Recipe
    """

    async def get_recipes(
        self,
        db: AsyncSession,
        skip: int = 0,
        limit: int = 100
    ) -> List[Recipe]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ä–µ—Ü–µ–ø—Ç—ã, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏ –∏ –≤—Ä–µ–º–µ–Ω–∏ –≥–æ—Ç–æ–≤–∫–∏
        """
        print(f"üìñ –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–µ—Ü–µ–ø—Ç–æ–≤ (–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å: {skip}, –ª–∏–º–∏—Ç: {limit})")

        query = (
            select(Recipe)
            .options(selectinload(Recipe.ingredients))
            .order_by(Recipe.views.desc(), Recipe.cooking_time.asc())
            .offset(skip)
            .limit(limit)
        )

        result = await db.execute(query)
        recipes = result.scalars().all()

        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(recipes)} —Ä–µ—Ü–µ–ø—Ç–æ–≤")
        return recipes

    async def get_recipe(self, db: AsyncSession, recipe_id: int) -> Optional[Recipe]:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç –ø–æ ID –∏ —É–≤–µ–ª–∏—á–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
        """
        print(f"üîç –ò—â–µ–º —Ä–µ—Ü–µ–ø—Ç —Å ID: {recipe_id}")

        query = (
            select(Recipe)
            .options(selectinload(Recipe.ingredients))
            .where(Recipe.id == recipe_id)
        )
        result = await db.execute(query)
        recipe = result.scalar_one_or_none()

        if recipe:
            print(f"‚úÖ –†–µ—Ü–µ–ø—Ç –Ω–∞–π–¥–µ–Ω: '{recipe.title}', —Ç–µ–∫—É—â–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã: {recipe.views}")
            recipe.views += 1
            await db.commit()
            await db.refresh(recipe)
            print(f"üìà –£–≤–µ–ª–∏—á–∏–ª–∏ —Å—á–µ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –¥–æ: {recipe.views}")
        else:
            print(f"‚ùå –†–µ—Ü–µ–ø—Ç —Å ID {recipe_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")

        return recipe

    async def create_recipe(
        self,
        db: AsyncSession,
        recipe: RecipeCreate
    ) -> Recipe:
        """
        –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ä–µ—Ü–µ–ø—Ç —Å –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞–º–∏
        """
        print(f"üÜï –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ä–µ—Ü–µ–ø—Ç: '{recipe.title}'")
        print(f"üìù –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã: {recipe.ingredient_names}")

        # –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º –≤—Å–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã
        ingredients = []
        for ingredient_name in recipe.ingredient_names:
            print(f"üîé –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç: '{ingredient_name}'")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–µ—Ç –ª–∏ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç
            query = select(Ingredient).where(Ingredient.name == ingredient_name)
            result = await db.execute(query)
            existing_ingredient = result.scalar_one_or_none()

            if existing_ingredient:
                print(f"‚úÖ –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç '{ingredient_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                ingredients.append(existing_ingredient)
            else:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç
                print(f"üÜï –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç: '{ingredient_name}'")
                new_ingredient = Ingredient(name=ingredient_name)
                db.add(new_ingredient)
                await db.flush()
                ingredients.append(new_ingredient)

        # –°–æ–∑–¥–∞–µ–º —Ä–µ—Ü–µ–ø—Ç
        print("üç≥ –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Ä–µ—Ü–µ–ø—Ç–∞...")
        db_recipe = Recipe(
            title=recipe.title,
            cooking_time=recipe.cooking_time,
            description=recipe.description,
            ingredients=ingredients
        )
        db.add(db_recipe)
        await db.commit()
        await db.refresh(db_recipe)

        # –Ø–≤–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
        await db.refresh(db_recipe, ['ingredients'])

        print(f"‚úÖ –†–µ—Ü–µ–ø—Ç '{recipe.title}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω —Å ID: {db_recipe.id}")
        return db_recipe

    async def get_ingredients(self, db: AsyncSession) -> List[Ingredient]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã
        """
        print("üìã –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤...")
        query = select(Ingredient)
        result = await db.execute(query)
        ingredients = result.scalars().all()

        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(ingredients)} –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤")
        return ingredients


# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
recipe_crud = CRUDRecipe()
print("‚úÖ CRUD –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω—ã –∏ –≥–æ—Ç–æ–≤—ã –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")